//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginParamsDto | undefined): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TokenResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegistrParamsDto | undefined): Observable<RegisterResultDto> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegisterResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegisterResultDto>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    registerWithPair(body: RegistrWithPairParamsDto | undefined): Observable<RegistrWithPairResultDto> {
        let url_ = this.baseUrl + "/api/Auth/register-with-pair";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterWithPair(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterWithPair(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegistrWithPairResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegistrWithPairResultDto>;
        }));
    }

    protected processRegisterWithPair(response: HttpResponseBase): Observable<RegistrWithPairResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegistrWithPairResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changePassword(body: ChangePasswordParamsDto | undefined): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/Auth/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param userId (optional) 
     * @param code (optional) 
     * @return OK
     */
    confirmEmail(userId: string | undefined, code: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Auth/confirm-email?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processConfirmEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    logout(): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/Auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getFamilyname(): Observable<GetFamilyNameResult> {
        let url_ = this.baseUrl + "/api/Auth/get-familyname";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFamilyname(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFamilyname(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetFamilyNameResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetFamilyNameResult>;
        }));
    }

    protected processGetFamilyname(response: HttpResponseBase): Observable<GetFamilyNameResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFamilyNameResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changeFamilyname(body: ChangeNameParams | undefined): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/Auth/change-familyname";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeFamilyname(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeFamilyname(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processChangeFamilyname(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changeUsername(body: ChangeNameParams | undefined): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/Auth/change-username";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeUsername(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeUsername(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processChangeUsername(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    sendingNewToken(): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/api/Auth/sending-new-token";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendingNewToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendingNewToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TokenResponse>;
        }));
    }

    protected processSendingNewToken(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getLocalizations(body: LocalizationParamsDto | undefined): Observable<LocalizationResultDto> {
        let url_ = this.baseUrl + "/api/Localization/GetLocalizations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocalizations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocalizations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LocalizationResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LocalizationResultDto>;
        }));
    }

    protected processGetLocalizations(response: HttpResponseBase): Observable<LocalizationResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LocalizationResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createSelectsName(body: SelectNameParams | undefined): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/NameSelection/CreateSelectsName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateSelectsName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateSelectsName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processCreateSelectsName(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createThrowedName(body: SelectNameParams | undefined): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/NameSelection/CreateThrowedName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateThrowedName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateThrowedName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processCreateThrowedName(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getName(body: NameSelectionFilterConditions | undefined): Observable<NameSelectrionResultDto> {
        let url_ = this.baseUrl + "/api/NameSelection/GetName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameSelectrionResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameSelectrionResultDto>;
        }));
    }

    protected processGetName(response: HttpResponseBase): Observable<NameSelectrionResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NameSelectrionResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getRandomName(body: NameSelectionFilterConditions | undefined): Observable<NameSelectrionResultDto[]> {
        let url_ = this.baseUrl + "/api/NameSelection/GetRandomName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRandomName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRandomName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameSelectrionResultDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameSelectrionResultDto[]>;
        }));
    }

    protected processGetRandomName(response: HttpResponseBase): Observable<NameSelectrionResultDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameSelectrionResultDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getRandomNames(body: NameSelectionFilterConditions | undefined): Observable<NameSelectrionResultDto[]> {
        let url_ = this.baseUrl + "/api/NameSelection/GetRandomNames";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRandomNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRandomNames(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameSelectrionResultDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameSelectrionResultDto[]>;
        }));
    }

    protected processGetRandomNames(response: HttpResponseBase): Observable<NameSelectrionResultDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameSelectrionResultDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getSelectedNames(): Observable<NameSelectrionResultDto[]> {
        let url_ = this.baseUrl + "/api/NameSelection/GetSelectedNames";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectedNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectedNames(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameSelectrionResultDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameSelectrionResultDto[]>;
        }));
    }

    protected processGetSelectedNames(response: HttpResponseBase): Observable<NameSelectrionResultDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameSelectrionResultDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getThrowedNames(): Observable<NameSelectrionResultDto[]> {
        let url_ = this.baseUrl + "/api/NameSelection/GetThrowedNames";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetThrowedNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetThrowedNames(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameSelectrionResultDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameSelectrionResultDto[]>;
        }));
    }

    protected processGetThrowedNames(response: HttpResponseBase): Observable<NameSelectrionResultDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameSelectrionResultDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    changeSelectedName(id: number | undefined): Observable<BaseValidResponse> {
        let url_ = this.baseUrl + "/api/NameSelection/ChangeSelectedName?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeSelectedName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeSelectedName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseValidResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseValidResponse>;
        }));
    }

    protected processChangeSelectedName(response: HttpResponseBase): Observable<BaseValidResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseValidResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class BaseValidResponse implements IBaseValidResponse {
    isValid?: boolean;
    message?: string[] | undefined;

    constructor(data?: IBaseValidResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
        }
    }

    static fromJS(data: any): BaseValidResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseValidResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        return data;
    }
}

export interface IBaseValidResponse {
    isValid?: boolean;
    message?: string[] | undefined;
}

export class ChangeNameParams implements IChangeNameParams {
    newName?: string | undefined;

    constructor(data?: IChangeNameParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newName = _data["newName"];
        }
    }

    static fromJS(data: any): ChangeNameParams {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeNameParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newName"] = this.newName;
        return data;
    }
}

export interface IChangeNameParams {
    newName?: string | undefined;
}

export class ChangePasswordParamsDto implements IChangePasswordParamsDto {
    currentPassword?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IChangePasswordParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordParamsDto {
    currentPassword?: string | undefined;
    newPassword?: string | undefined;
}

export class GetFamilyNameResult implements IGetFamilyNameResult {
    isValid?: boolean;
    message?: string[] | undefined;
    familyName?: string | undefined;

    constructor(data?: IGetFamilyNameResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.familyName = _data["familyName"];
        }
    }

    static fromJS(data: any): GetFamilyNameResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetFamilyNameResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["familyName"] = this.familyName;
        return data;
    }
}

export interface IGetFamilyNameResult {
    isValid?: boolean;
    message?: string[] | undefined;
    familyName?: string | undefined;
}

export class LocalizationParamsDto implements ILocalizationParamsDto {
    languageCode?: string | undefined;
    key?: number[] | undefined;

    constructor(data?: ILocalizationParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageCode = _data["languageCode"];
            if (Array.isArray(_data["key"])) {
                this.key = [] as any;
                for (let item of _data["key"])
                    this.key!.push(item);
            }
        }
    }

    static fromJS(data: any): LocalizationParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageCode"] = this.languageCode;
        if (Array.isArray(this.key)) {
            data["key"] = [];
            for (let item of this.key)
                data["key"].push(item);
        }
        return data;
    }
}

export interface ILocalizationParamsDto {
    languageCode?: string | undefined;
    key?: number[] | undefined;
}

export class LocalizationResultDto implements ILocalizationResultDto {
    localization?: { [key: string]: string; } | undefined;

    constructor(data?: ILocalizationResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["localization"]) {
                this.localization = {} as any;
                for (let key in _data["localization"]) {
                    if (_data["localization"].hasOwnProperty(key))
                        (<any>this.localization)![key] = _data["localization"][key];
                }
            }
        }
    }

    static fromJS(data: any): LocalizationResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.localization) {
            data["localization"] = {};
            for (let key in this.localization) {
                if (this.localization.hasOwnProperty(key))
                    (<any>data["localization"])[key] = (<any>this.localization)[key];
            }
        }
        return data;
    }
}

export interface ILocalizationResultDto {
    localization?: { [key: string]: string; } | undefined;
}

export class LoginParamsDto implements ILoginParamsDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginParamsDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class NameSelectionFilterConditions implements INameSelectionFilterConditions {
    name?: string | undefined;
    gender?: string | undefined;
    startCharacter?: string | undefined;
    quantity?: number;

    constructor(data?: INameSelectionFilterConditions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.startCharacter = _data["startCharacter"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): NameSelectionFilterConditions {
        data = typeof data === 'object' ? data : {};
        let result = new NameSelectionFilterConditions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["startCharacter"] = this.startCharacter;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface INameSelectionFilterConditions {
    name?: string | undefined;
    gender?: string | undefined;
    startCharacter?: string | undefined;
    quantity?: number;
}

export class NameSelectrionResultDto implements INameSelectrionResultDto {
    isValid?: boolean;
    message?: string[] | undefined;
    id?: number;
    name?: string | undefined;
    gender?: string;

    constructor(data?: INameSelectrionResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): NameSelectrionResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameSelectrionResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["gender"] = this.gender;
        return data;
    }
}

export interface INameSelectrionResultDto {
    isValid?: boolean;
    message?: string[] | undefined;
    id?: number;
    name?: string | undefined;
    gender?: string;
}

export class RegisterResultDto implements IRegisterResultDto {
    isValid?: boolean;
    message?: string[] | undefined;
    success?: boolean;
    callbackUrl?: string | undefined;
    error?: string | undefined;

    constructor(data?: IRegisterResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.success = _data["success"];
            this.callbackUrl = _data["callbackUrl"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): RegisterResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["success"] = this.success;
        data["callbackUrl"] = this.callbackUrl;
        data["error"] = this.error;
        return data;
    }
}

export interface IRegisterResultDto {
    isValid?: boolean;
    message?: string[] | undefined;
    success?: boolean;
    callbackUrl?: string | undefined;
    error?: string | undefined;
}

export class RegistrParamsDto implements IRegistrParamsDto {
    userName?: string | undefined;
    familyName?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;

    constructor(data?: IRegistrParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.familyName = _data["familyName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): RegistrParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["familyName"] = this.familyName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }
}

export interface IRegistrParamsDto {
    userName?: string | undefined;
    familyName?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
}

export class RegistrWithPairParamsDto implements IRegistrWithPairParamsDto {
    userName?: string | undefined;
    familyName?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
    pairName?: string | undefined;
    pairEmail?: string | undefined;

    constructor(data?: IRegistrWithPairParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.familyName = _data["familyName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.pairName = _data["pairName"];
            this.pairEmail = _data["pairEmail"];
        }
    }

    static fromJS(data: any): RegistrWithPairParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrWithPairParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["familyName"] = this.familyName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["pairName"] = this.pairName;
        data["pairEmail"] = this.pairEmail;
        return data;
    }
}

export interface IRegistrWithPairParamsDto {
    userName?: string | undefined;
    familyName?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
    pairName?: string | undefined;
    pairEmail?: string | undefined;
}

export class RegistrWithPairResultDto implements IRegistrWithPairResultDto {
    isValid?: boolean;
    message?: string[] | undefined;
    success?: boolean;
    callbackUrl?: string | undefined;
    error?: string | undefined;
    pairCallbackUrl?: string | undefined;

    constructor(data?: IRegistrWithPairResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.success = _data["success"];
            this.callbackUrl = _data["callbackUrl"];
            this.error = _data["error"];
            this.pairCallbackUrl = _data["pairCallbackUrl"];
        }
    }

    static fromJS(data: any): RegistrWithPairResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrWithPairResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["success"] = this.success;
        data["callbackUrl"] = this.callbackUrl;
        data["error"] = this.error;
        data["pairCallbackUrl"] = this.pairCallbackUrl;
        return data;
    }
}

export interface IRegistrWithPairResultDto {
    isValid?: boolean;
    message?: string[] | undefined;
    success?: boolean;
    callbackUrl?: string | undefined;
    error?: string | undefined;
    pairCallbackUrl?: string | undefined;
}

export class SelectNameParams implements ISelectNameParams {
    id?: number;
    holdingTime?: string;

    constructor(data?: ISelectNameParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.holdingTime = _data["holdingTime"];
        }
    }

    static fromJS(data: any): SelectNameParams {
        data = typeof data === 'object' ? data : {};
        let result = new SelectNameParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["holdingTime"] = this.holdingTime;
        return data;
    }
}

export interface ISelectNameParams {
    id?: number;
    holdingTime?: string;
}

export class TokenResponse implements ITokenResponse {
    isValid?: boolean;
    message?: string[] | undefined;
    token?: string | undefined;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["token"] = this.token;
        return data;
    }
}

export interface ITokenResponse {
    isValid?: boolean;
    message?: string[] | undefined;
    token?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}